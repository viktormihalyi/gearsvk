name: Linux Build

on:
  push:
    branches: [ master ]
    paths:
      - 'src/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        buildType: [Debug, Release]
        compiler:
          - { CC: gcc-10,   CXX: g++-10 }
          - { CC: clang-10, CXX: clang++-10 }
        unityBuild: [OFF]
        include:
            - buildType: Debug
              compiler: { CC: clang-10, CXX: clang++-10 }
              unityBuild: ON

    steps:
    - uses: actions/checkout@v2
  
    - name: Cache conan packages
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-packages
      with:
        path: ~/.conan
        key: ${{ runner.os }}-${{ matrix.compiler.CC }}-${{ matrix.buildType }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.txt', 'conanprofile') }}
            
    - name: Add Vulkan SDK package
      run: |
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
        sudo apt-get update
    
    - name: Install wheel from pip
      run: |
        python3 -m pip install wheel 
        python3 -m pip install conan 
      
    - name: Create default conan profile
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
      run: |
        conan profile new default --detect --force
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Install system dependencies
      run: sudo apt-get install ${{ matrix.compiler.CC }} vulkan-sdk ninja-build python3-setuptools python3-venv libgl1-mesa-dev xorg-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-xinerama0-dev libx11-xcb-dev libxcb-dri3-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-util-dev libxcb-xfixes0-dev
  
    - name: Configure CMake
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
      run: |
        cmake -G Ninja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.buildType}} -DCMAKE_UNITY_BUILD=${{matrix.unityBuild}} -DUNITY_BUILD_BATCH_SIZE=999999
      
    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --parallel

    - name: Run tests
      working-directory: ${{github.workspace}}/build/bin
      run: |
        ./GVKTest --gtest_filter=Empty.*:RenderGraphPassTest.*
